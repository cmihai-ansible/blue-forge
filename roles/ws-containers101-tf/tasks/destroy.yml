---
- name: Check for terraform.tfstate file
  stat:
    path: "{{ tfile_dir }}/terraform.tfstate"
  register: check_terraform_state

- name: Check for state of terraform.tfstate file lol
  shell:
    cmd: "wc -l {{ tfile_dir }}/terraform.tfstate | cut -d ' ' -f 1"
  when: check_terraform_state.stat.exists
  register: state_size_check

- name: Set fact for template recration
  set_fact:
    terraform_destroy: "{{ 'no' if ((check_terraform_state.stat.exists) and (state_size_check.stdout|int > 16)) else 'yes' }}"
    tfile_dir: "{{ generation_directory }}/bin"

- name: Run Terraform destroy
  community.general.terraform:
    project_path: "{{ tfile_dir }}"
    state: absent
    binary_path: "{{ terraform_path }}"
    variables:
      ibmcloud_api_key: "{{ ibmcloud_api_key }}"
  when: terraform_destroy|bool
  register: terraform_result
  delay: 3
  retries: 3
  until: terraform_result is not failed
  tags:
    - run_terraform

- name: Remove old generated files
  file:
    path: "{{ tfile_dir }}"
    state: absent
  when: terraform_destroy|bool

- name: Get Student Container Node Floating IP assets
  ibm.cloudcollection.ibm_is_floating_ip_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-student-{{ item }}-student-container-fip"
  register: student_student_container_fip_info
  ignore_errors: true
  with_sequence: start=0 end="{{ student_count }}" stride=1

- name: Release Student Container Node Floating IP
  uri:
    url: "{{ api_endpoint }}/v1/floating_ips/{{ item.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: student_container_fip_api
  ignore_errors: yes
  failed_when: student_container_fip_api.status == 404
  changed_when: student_container_fip_api.status == 204
  when: item.resource.id is defined and (student_student_container_fip_info|length>0)
  with_items: "{{ student_student_container_fip_info.results }}"

- name: Get Student Container Node VSI Information
  ibm.cloudcollection.ibm_is_instance_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-student-{{ item }}-student-container-vsi"
    region: "{{ region }}"
  register: student_student_container_vsi_info
  ignore_errors: true
  with_sequence: start=0 end="{{ student_count }}" stride=1

- name: Remove Student Container Node VSIs
  uri:
    url: "{{ api_endpoint }}/v1/instances/{{ item.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: student_container_vsi_api
  ignore_errors: yes
  failed_when: student_container_vsi_api.status == 404
  changed_when: student_container_vsi_api.status == 204
  when: item.resource.id is defined and (student_student_container_vsi_info|length>0)
  with_items: "{{ student_student_container_vsi_info.results }}"

- name: Get Proctor Floating IP asset
  ibm.cloudcollection.ibm_is_floating_ip_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-pb-fip"
  register: pb_fip_info
  ignore_errors: true

- name: Release Proctor Floating IP
  uri:
    url: "{{ api_endpoint }}/v1/floating_ips/{{ pb_fip_info.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: student_container_fip_api
  ignore_errors: yes
  failed_when: student_container_fip_api.status == 404
  changed_when: student_container_fip_api.status == 204
  when: pb_fip_info.resource.id is defined

- name: Get Proctor VSI Information
  ibm.cloudcollection.ibm_is_instance_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-pb-vsi"
    region: "{{ region }}"
  register: pb_vsi_info
  ignore_errors: true

- name: Remove Proctor VSI
  uri:
    url: "{{ api_endpoint }}/v1/instances/{{ pb_vsi_info.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: pb_vsi_api
  ignore_errors: yes
  failed_when: >
    pb_vsi_api.status == 404
  changed_when: pb_vsi_api.status == 204

- name: Get the SSH Key
  ibm.cloudcollection.ibm_is_ssh_key_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-ssh-key"
  register: ssh_key_output
  ignore_errors: true

- name: Remove SSH Key
  ibm.cloudcollection.ibm_is_ssh_key:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    state: absent
    id: "{{ ssh_key_output.resource.id }}"
  when: ssh_key_output.resource.id is defined

- name: Query Security Group for Load Balancers
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-student-container-sg"
  register: student_container_security_group
  ignore_errors: true

- name: Remove Security Group for Student Container Nodes
  uri:
    url: "{{ api_endpoint }}/v1/security_groups/{{ student_container_security_group.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: student_container_sg_api
  ignore_errors: yes
  failed_when: >
    student_container_sg_api.status == 403 or
    student_container_sg_api.status == 404 or
    student_container_sg_api.status == 409
  changed_when: student_container_sg_api.status == 204
  when: student_container_security_group.resource.id is defined

- name: Query Security Group for Proctor Bastion
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-proctor-sg"
  register: proctor_bastion_security_group
  ignore_errors: true

- name: Remove Security Group for Proctor Bastion
  uri:
    url: "{{ api_endpoint }}/v1/security_groups/{{ proctor_bastion_security_group.resource.id }}?version=2021-01-12&generation=2"
    method: DELETE
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 204]
  register: pb_sg_api
  ignore_errors: yes
  failed_when: >
    pb_sg_api.status == 403 or
    pb_sg_api.status == 404 or
    pb_sg_api.status == 409
  changed_when: pb_sg_api.status == 204
  when: proctor_bastion_security_group.resource.id is defined

#- name: Remove Security Group for Proctor Bastion
#  ibm.cloudcollection.ibm_is_security_group:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: absent
#    id: "{{ proctor_bastion_security_group.resource.id }}"
#  when: proctor_bastion_security_group.resource.id is defined

- name: Get the VPC Subnet info
  ibm.cloudcollection.ibm_is_subnet_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-subnet"
  register: subnet_info
  ignore_errors: true

- name: Remove VPC Subnet
  ibm.cloudcollection.ibm_is_subnet:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    state: absent
    id: "{{ subnet_info.resource.id }}"
  when: subnet_info.resource.id is defined

- name: Get the VPC Public Gateway info
  ibm.cloudcollection.ibm_is_public_gateway_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-pubgtw"
  register: pubgtw_info
  ignore_errors: true

- name: Remove the VPC Public Gateway
  ibm.cloudcollection.ibm_is_public_gateway:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    state: absent
    id: "{{ pubgtw_info.resource.id }}"
  when: pubgtw_info.resource.id is defined

- name: Get the VPC details
  ibm.cloudcollection.ibm_is_vpc_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-vpc"
  register: vpc_output
  ignore_errors: true

- name: Remove VPC
  ibm.cloudcollection.ibm_is_vpc:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    region: "{{ region }}"
    state: absent
    id: "{{ vpc_output.resource.id }}"
  when: vpc_output.resource.id is defined
