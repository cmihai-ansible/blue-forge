---
- name: Create Security Group for K8s Control Plane via API
  uri:
    url: "{{ api_endpoint }}/v1/security_groups?version=2021-01-12&generation=2"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'k8s_control_plane_security_group.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 201]
  register: cp_sg_api
  ignore_errors: yes
  changed_when: cp_sg_api.status == 201

- name: Fail if CP SG API Call not within response parameters
  debug:
    msg: "{{ cp_sg_api }}"
  failed_when: >
    cp_sg_api.json.errors[0].code != 'validation_unique_failed' and
    cp_sg_api.status != 200
  when: cp_sg_api.json.errors is defined

- name: Create Security Group for K8s App Nodes via API
  uri:
    url: "{{ api_endpoint }}/v1/security_groups?version=2021-01-12&generation=2"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'k8s_app_node_security_group.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 201]
  register: app_sg_api
  ignore_errors: yes
  changed_when: app_sg_api.status == 201

- name: Fail if App Node SG API call not within response parameters
  debug:
    msg: "{{ app_sg_api }}"
  failed_when: >
    app_sg_api.json.errors[0].code != 'validation_unique_failed' and
    app_sg_api.status != 200
  when: app_sg_api.json.errors is defined

- name: Create Security Group for K8s Load Balancer Nodes via API
  uri:
    url: "{{ api_endpoint }}/v1/security_groups?version=2021-01-12&generation=2"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'lb_security_group.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 201]
  register: lb_sg_api
  ignore_errors: yes
  changed_when: lb_sg_api.status == 201

- name: Fail if Load Balancer SG API call not within response parameters
  debug:
    msg: "{{ lb_sg_api }}"
  failed_when: >
    lb_sg_api.json.errors[0].code != 'validation_unique_failed' and
    lb_sg_api.status != 200
  when: lb_sg_api.json.errors is defined

- name: Create Security Group for Proctor Bastion via API
  uri:
    url: "{{ api_endpoint }}/v1/security_groups?version=2021-01-12&generation=2"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'proctor_security_group.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: "{{ ibm_api_token }}"
    return_content: yes
    status_code: [200, 201]
  register: pb_sg_api
  ignore_errors: yes
  changed_when: pb_sg_api.status == 201

- name: Fail if Proctor Bastion SG API call not within response parameters
  debug:
    msg: "{{ pb_sg_api }}"
  failed_when: >
    pb_sg_api.json.errors[0].code != 'validation_unique_failed' and
    pb_sg_api.status != 200
  when: pb_sg_api.json.errors is defined

- name: Query Security Group for K8s Control Plane
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-control-plane-sg"
  register: k8s_control_plane_security_group

- name: Query Security Group for K8s App Nodes
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-app-node-sg"
  register: k8s_app_node_security_group

- name: Query Security Group for Load Balancers
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-lb-sg"
  register: k8s_lb_security_group

- name: Query Security Group for Proctor Bastion
  ibm.cloudcollection.ibm_is_security_group_info:
    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
    name: "{{ workshop_shortcode }}-{{ guid }}-proctor-sg"
  register: proctor_bastion_security_group

#- name: Create Security Group for K8s Control Plane
#  ibm.cloudcollection.ibm_is_security_group:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    name: "{{ workshop_shortcode }}-{{ guid }}-control-plane-sg"
#    vpc: "{{ vpc_create_output.resource.id }}"
#  register: k8s_control_plane_security_group
#
#- name: Create Security Group for K8s App Nodes
#  ibm.cloudcollection.ibm_is_security_group:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    name: "{{ workshop_shortcode }}-{{ guid }}-app-node-sg"
#    vpc: "{{ vpc_create_output.resource.id }}"
#  register: k8s_app_node_security_group
#
#- name: Create Security Group for Load Balancers
#  ibm.cloudcollection.ibm_is_security_group:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    name: "{{ workshop_shortcode }}-{{ guid }}-lb-sg"
#    vpc: "{{ vpc_create_output.resource.id }}"
#  register: k8s_lb_security_group
#
#- name: Create Security Group for Proctor Bastion
#  ibm.cloudcollection.ibm_is_security_group:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    name: "{{ workshop_shortcode }}-{{ guid }}-proctor-bastion-sg"
#    vpc: "{{ vpc_create_output.resource.id }}"
#  register: proctor_bastion_security_group

#- name: Configure K8s Control Plane Security Group Rules for TCP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_control_plane_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_control_plane_tcp_port_rules }}"
#  when: k8s_control_plane_tcp_port_rules is defined and (k8s_control_plane_tcp_port_rules|length>0)
#
#- name: Configure K8s App Node Security Group Rules for TCP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_app_node_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_app_node_tcp_port_rules }}"
#  when: k8s_app_node_tcp_port_rules is defined and (k8s_app_node_tcp_port_rules|length>0)
#
#- name: Configure Load Balancer Security Group Rules for TCP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_lb_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_lb_tcp_port_rules }}"
#  when: k8s_lb_tcp_port_rules is defined and (k8s_lb_tcp_port_rules|length>0)
#
#- name: Configure Proctor Bastion Security Group Rules for TCP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ proctor_bastion_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ proctor_bastion_tcp_port_rules }}"
#  when: proctor_bastion_tcp_port_rules is defined and (proctor_bastion_tcp_port_rules|length>0)
#
#- name: Configure K8s Control Plane Security Group Rules for UDP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_control_plane_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_control_plane_udp_port_rules }}"
#  when: k8s_control_plane_udp_port_rules is defined and (k8s_control_plane_udp_port_rules|length>0)
#
#- name: Configure K8s App Node Security Group Rules for UDP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_app_node_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_app_node_udp_port_rules }}"
#  when: k8s_app_node_udp_port_rules is defined and (k8s_app_node_udp_port_rules|length>0)
#
#- name: Configure Load Balancer Security Group Rules for UDP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ k8s_lb_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ k8s_lb_udp_port_rules }}"
#  when: k8s_lb_udp_port_rules is defined and (k8s_lb_udp_port_rules|length>0)
#
#- name: Configure Proctor Bastion Security Group Rules for UDP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ proctor_bastion_security_group.resource.id }}"
#    direction: inbound
#    remote: "{{ item.remote }}"
#    tcp:
#      - port_max: "{{ item.end }}"
#        port_min: "{{ item.start }}"
#  with_items: "{{ proctor_bastion_udp_port_rules }}"
#  when: proctor_bastion_udp_port_rules is defined and (proctor_bastion_udp_port_rules|length>0)

#- name: Configure Security Group Rule to open ports for SSH
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ vpc_create_output.resource.default_security_group }}"
#    direction: inbound
#    remote: 0.0.0.0/0
#    tcp:
#      - port_max: 22
#        port_min: 22
#
#- name: Configure Security Group Rule to open ports for Cockpit TCP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ vpc_create_output.resource.default_security_group }}"
#    direction: inbound
#    remote: 0.0.0.0/0
#    tcp:
#      - port_max: 9090
#        port_min: 9090
#
#- name: Configure Security Group Rule to open ports for Cockpit UDP
#  ibm.cloudcollection.ibm_is_security_group_rule:
#    ibmcloud_api_key: "{{ ibmcloud_api_key }}"
#    state: available
#    group: "{{ vpc_create_output.resource.default_security_group }}"
#    direction: inbound
#    remote: 0.0.0.0/0
#    udp:
#      - port_max: 9090
#        port_min: 9090
