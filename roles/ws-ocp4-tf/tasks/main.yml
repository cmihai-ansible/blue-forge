---
# tasks file for ws-ocp4-tf
- name: Preflight checks
  include_tasks: preflight.yml
  tags:
    - preflight

- name: Get IBM API Key
  include_tasks: get_ibm_api_key.yml
  tags:
    - get_ibm_api_key

- name: Get IBM Image List
  include_tasks: get_ibm_image_list.yml
  tags:
    - get_ibm_image_list

- name: Check for terraform.tfstate file
  stat:
    path: "{{ tfile_dir }}/stage1/terraform.tfstate"
  register: check_terraform_state

- name: Check for state of terraform.tfstate file lol
  shell:
    cmd: "wc -l {{ tfile_dir }}/stage1/terraform.tfstate | cut -d ' ' -f 1"
  when: check_terraform_state.stat.exists
  register: state_size_check

- name: Set fact for template recration
  set_fact:
    recreate_templates: "{{ 'no' if ((check_terraform_state.stat.exists) and (state_size_check.stdout|int > 10)) else 'yes' }}"

- name: Delete terraform template directory
  file:
    path: "{{ tfile_dir }}"
    state: absent
  when: recreate_templates|bool
  tags:
    - never
    - delete_terraform_directory

- name: Create terraform template directory
  file:
    path: "{{ tfile_dir }}"
    state: directory

- name: Create terraform cloud init template directory
  file:
    path: "{{ tfile_dir }}/{{ item }}"
    state: directory
  with_items: ['cloud_inits', 'stage1', 'stage2', 'stage3', 'stage4']

- name: Create SSH Key
  community.crypto.openssh_keypair:
    path: "{{ generation_directory }}/id_ssh_rsa"
    size: 4096
    type: rsa
  register: new_ssh_key_pair
  tags:
    - template_terraform
    - generate_keys

- name: Create Public SSH Key file
  copy:
    content: "{{ new_ssh_key_pair.public_key }}"
    dest: "{{ generation_directory }}/id_ssh_rsa.pub"
  tags:
    - template_terraform
    - generate_keys

- name: Template Terraform objects
  include_tasks: template_terraform.yml
  tags:
    - template_terraform
  when: recreate_templates|bool

- name: Run Terraform
  community.general.terraform:
    project_path: "{{ tfile_dir }}/stage1/"
    state: present
    force_init: true
    binary_path: "{{ terraform_path }}"
    variables:
      ibmcloud_api_key: "{{ ibmcloud_api_key }}"
  register: terraform_result
  delay: 3
  retries: 3
  until: terraform_result is not failed
  tags:
    - run_terraform

- name: Pull in stage 1 Terraform state file
  include_vars: 
    file: "{{ tfile_dir }}/stage1/terraform.tfstate"
    name: tfstate
  tags:
    - build_inventory

- name: Filter and find needed information
  set_fact:
    proctor_bastion_vsi_state: "{{ tfstate | community.general.json_query(proctor_bastion_vsi_jq) | community.general.json_query(vsi_filter) | first }}"
    proctor_bastion_fip_state: "{{ tfstate | community.general.json_query(proctor_bastion_fip_jq) | community.general.json_query(fip_filter) | first }}"

    load_balancer_vsi_state: "{{ tfstate | community.general.json_query(load_balancer_vsi_jq) | community.general.json_query(vsi_filter) | first }}"
    load_balancer_fip_state: "{{ tfstate | community.general.json_query(load_balancer_fip_jq) | community.general.json_query(fip_filter) | first }}"

    dns_vsi_state: "{{ tfstate | community.general.json_query(dns_jq) | community.general.json_query(bulk_vsi_filter) | list }}"
    dns_fip_state: "{{ tfstate | community.general.json_query(dns_jq) | community.general.json_query(bulk_fip_filter) | list }}"
  vars:
    vsi_filter: "[?type=='ibm_is_instance'].instances[0].attributes.primary_network_interface[0].primary_ipv4_address"
    fip_filter: "[?type=='ibm_is_floating_ip'].instances[0].attributes.address"
    bulk_vsi_filter: "[?type=='ibm_is_instance'].instances[0].attributes.primary_network_interface[0].primary_ipv4_address"
    bulk_fip_filter: "[?type=='ibm_is_floating_ip'].instances[0].attributes.address"

    proctor_bastion_fip_jq: "resources[?name=='{{ workshop_shortcode }}_{{ guid }}_pb_fip']"
    proctor_bastion_vsi_jq: "resources[?name=='{{ workshop_shortcode }}_{{ guid }}_pb_vsi']"

    load_balancer_fip_jq: "resources[?name=='{{ workshop_shortcode }}_{{ guid }}_lb_fip']"
    load_balancer_vsi_jq: "resources[?name=='{{ workshop_shortcode }}_{{ guid }}_lb_vsi']"

    dns_jq: "resources[?name.contains(@,'{{ workshop_shortcode }}_{{ guid }}_ns')]"
  tags:
    - build_inventory

- name: Add Proctor Bastion VSI to Ansible inventory
  add_host:
    name: "{{ proctor_bastion_fip_state }}"
    ansible_user: root
    groups:
      - pb_vsi
      - workshop_vsi
      - ext_workshop_vsi
      - internal_workshop_vsi
    ansible_ssh_user: root
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    ansible_ssh_private_key_file: "{{ generation_directory }}/id_ssh_rsa"
    ansible_set_hostname: "bastion"
    ansible_set_fqdn: "bastion.{{ guid }}.{{ domain }}"
    ansible_external_ip: "{{ proctor_bastion_fip_state }}"
    ansible_internal_ip: "{{ proctor_bastion_vsi_state }}"
  tags:
    - build_inventory
    - proctor_bastion

- name: Add Load Balancer VSI to Ansible inventory
  add_host:
    name: "{{ load_balancer_fip_state }}"
    ansible_user: root
    groups:
      - lb_vsi
      - workshop_vsi
      - ext_workshop_vsi
      - internal_workshop_vsi
    ansible_ssh_user: root
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    ansible_ssh_private_key_file: "{{ generation_directory }}/id_ssh_rsa"
    ansible_set_hostname: "lb"
    ansible_set_fqdn: "lb.{{ guid }}.{{ domain }}"
    ansible_external_ip: "{{ load_balancer_fip_state }}"
    ansible_internal_ip: "{{ load_balancer_vsi_state }}"
  tags:
    - build_inventory
    - load_balancer

- name: Add DNS Node to dns_vsi, workshop_vsi, internal_workshop_vsi, and ext_workshop_vsi groups
  add_host:
    name: "{{ dns_fip_state[ansible_loop.index0]  }}"
    ansible_user: root
    groups:
      - dns_vsi
      - workshop_vsi
      - ext_workshop_vsi
      - internal_workshop_vsi
    ansible_ssh_user: root
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    ansible_ssh_private_key_file: "{{ generation_directory }}/id_ssh_rsa"
    ansible_set_fqdn: "ns{{ ansible_loop.index }}-{{ workshop_shortcode }}-{{ guid }}.{{ domain }}"
    ansible_set_hostname: "ns{{ ansible_loop.index }}-{{ workshop_shortcode }}-{{ guid }}"
    ansible_external_ip: "{{ dns_fip_state[ansible_loop.index0] }}"
    ansible_internal_ip: "{{ dns_vsi_state[ansible_loop.index0] }}"
    tfile_dir: "{{ tfile_dir }}"
  loop: "{{ dns_vsi_state }}"
  loop_control:
    extended: yes
  tags:
    - build_inventory
    - dns_nodes
